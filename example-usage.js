/**
 * Multi-Swap dApp Usage Examples
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Multi-Swap dApp
 * –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–æ–≤
 */

const { ethers } = require('hardhat');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
let dappConfig;
try {
  dappConfig = JSON.parse(fs.readFileSync('dapp-config.json', 'utf8'));
} catch (error) {
  console.log('‚ùå Run npm run deploy first!');
  process.exit(1);
}

// ABI –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
const multiSwapABI = [
  "function executeSwap((uint8,address,address,uint256,uint256,uint16,bytes32)) external returns (uint256)",
  "function createPancakePool(address,address,uint256,uint256) external returns (address)",
  "function createRaydiumPool(bytes32,bytes32,uint64,uint64,uint16) external payable returns (bytes32)",
  "function isPancakePoolExists(address,address) external view returns (bool)",
  "function isRaydiumPoolExists(bytes32) external view returns (bool)"
];

const nftABI = [
  "function getUserStats(address) external view returns (uint256,uint256,uint256,uint256)",
  "function mintRewardNFT(uint256,string) external",
  "function getUserNFTs(address) external view returns (uint256[])",
  "function calculatePoints(uint256) external pure returns (uint256)"
];

const erc20ABI = [
  "function balanceOf(address) external view returns (uint256)",
  "function approve(address,uint256) external returns (bool)",
  "function transfer(address,uint256) external returns (bool)"
];

async function examples() {
  console.log('üìö === MULTI-SWAP DAPP USAGE EXAMPLES ===\n');

  const [signer] = await ethers.getSigners();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  const multiSwap = new ethers.Contract(dappConfig.contracts.multiSwapOrchestrator, multiSwapABI, signer);
  const nftRewards = new ethers.Contract(dappConfig.contracts.nftRewards, nftABI, signer);
  const usdcToken = new ethers.Contract(dappConfig.tokens.USDC.address, erc20ABI, signer);
  const solToken = new ethers.Contract(dappConfig.tokens.SOL.address, erc20ABI, signer);

  console.log('üìã Loaded contracts:');
  console.log(`   MultiSwap: ${dappConfig.contracts.multiSwapOrchestrator}`);
  console.log(`   NFT Rewards: ${dappConfig.contracts.nftRewards}`);
  console.log(`   USDC: ${dappConfig.tokens.USDC.address}`);
  console.log(`   SOL: ${dappConfig.tokens.SOL.address}\n`);

  // === –ü–†–ò–ú–ï–† 1: PancakeSwap Swap ===
  console.log('ü•û === EXAMPLE 1: PANCAKESWAP SWAP ===');
  
  console.log(`
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
const multiSwap = new ethers.Contract(
  "${dappConfig.contracts.multiSwapOrchestrator}",
  multiSwapABI,
  signer
);

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PancakeSwap —Å–≤–∞–ø–∞
const pancakeSwapParams = {
  platform: 0,                    // 0 = PancakeSwap
  tokenA: "${dappConfig.tokens.USDC.address}",
  tokenB: "${dappConfig.tokens.SOL.address}",
  amountIn: ethers.parseUnits('100', 6),     // 100 USDC
  amountOutMin: ethers.parseUnits('3', 9),   // –º–∏–Ω–∏–º—É–º 3 SOL
  slippage: 300,                   // 3% slippage
  raydiumPoolId: ethers.ZeroHash   // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è PancakeSwap
};

// –ê–ø–ø—Ä—É–≤ —Ç–æ–∫–µ–Ω–æ–≤
await usdcToken.approve("${dappConfig.contracts.multiSwapOrchestrator}", pancakeSwapParams.amountIn);

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–∞–ø–∞
const tx = await multiSwap.executeSwap(pancakeSwapParams);
await tx.wait();

console.log('‚úÖ PancakeSwap swap completed!');
  `);

  // === –ü–†–ò–ú–ï–† 2: Raydium Swap ===
  console.log('‚ö° === EXAMPLE 2: RAYDIUM SWAP ===');
  
  const raydiumPools = dappConfig.raydium.pools;
  const hasRaydiumPools = Object.keys(raydiumPools).length > 0;
  
  if (hasRaydiumPools) {
    const poolId = raydiumPools['usdc/sol'];
    console.log(`
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Raydium —Å–≤–∞–ø–∞
const raydiumSwapParams = {
  platform: 1,                    // 1 = Raydium
  tokenA: "${dappConfig.tokens.USDC.address}",
  tokenB: "${dappConfig.tokens.SOL.address}",
  amountIn: ethers.parseUnits('50', 6),      // 50 USDC
  amountOutMin: ethers.parseUnits('1', 9),   // –º–∏–Ω–∏–º—É–º 1 SOL
  slippage: 500,                   // 5% slippage
  raydiumPoolId: "${poolId}"       // ID Raydium –ø—É–ª–∞
};

// –ê–ø–ø—Ä—É–≤ —Ç–æ–∫–µ–Ω–æ–≤
await usdcToken.approve("${dappConfig.contracts.multiSwapOrchestrator}", raydiumSwapParams.amountIn);

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–∞–ø–∞
const tx = await multiSwap.executeSwap(raydiumSwapParams);
await tx.wait();

console.log('‚úÖ Raydium swap completed!');
    `);
  } else {
    console.log(`
// ‚ö†Ô∏è Raydium –ø—É–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Raydium –ø—É–ª–∞:

const poolId = await multiSwap.createRaydiumPool(
  "${dappConfig.tokens.USDC.address_spl}", // USDC SPL mint
  "${dappConfig.tokens.SOL.address_spl}",  // SOL SPL mint
  ethers.parseUnits('1000', 6),  // 1000 USDC
  ethers.parseUnits('30', 9),    // 30 SOL
  0,                             // config index
  { value: ethers.parseEther('0.1') } // lamports –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
);
    `);
  }

  // === –ü–†–ò–ú–ï–† 3: NFT Rewards ===
  console.log('\nüéÅ === EXAMPLE 3: NFT REWARDS ===');
  
  console.log(`
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const nftContract = new ethers.Contract(
  "${dappConfig.contracts.nftRewards}",
  nftABI,
  signer
);

const [totalSwaps, totalPoints, totalNFTs, lastActivity] = 
  await nftContract.getUserStats(userAddress);

console.log('User stats:', {
  swaps: totalSwaps.toString(),
  points: totalPoints.toString(),
  nfts: totalNFTs.toString()
});

// –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –∑–∞ —Å–≤–∞–ø
const swapAmount = ethers.parseUnits('100', 6); // 100 USDC
const points = await nftContract.calculatePoints(swapAmount);
console.log('Points for swap:', points.toString());

// –ú–∏–Ω—Ç NFT –∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã
if (totalPoints >= 10n) {
  const mintTx = await nftContract.mintRewardNFT(10, "My Achievement");
  await mintTx.wait();
  console.log('‚úÖ NFT minted!');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userNFTs = await nftContract.getUserNFTs(userAddress);
console.log('User NFTs:', userNFTs.map(id => id.toString()));
  `);

  // === –ü–†–ò–ú–ï–† 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–æ–≤ ===
  console.log('\nüåä === EXAMPLE 4: POOL MANAGEMENT ===');
  
  console.log(`
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è PancakeSwap –ø—É–ª–∞
const pancakePoolExists = await multiSwap.isPancakePoolExists(
  "${dappConfig.tokens.USDC.address}",
  "${dappConfig.tokens.SOL.address}"
);
console.log('PancakeSwap USDC/SOL pool exists:', pancakePoolExists);
  `);

  if (hasRaydiumPools) {
    const poolId = raydiumPools['usdc/sol'];
    console.log(`
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Raydium –ø—É–ª–∞
const raydiumPoolExists = await multiSwap.isRaydiumPoolExists("${poolId}");
console.log('Raydium USDC/SOL pool exists:', raydiumPoolExists);
    `);
  }

  // === –ü–†–ò–ú–ï–† 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º ===
  console.log('\n‚öñÔ∏è === EXAMPLE 5: PLATFORM COMPARISON ===');
  
  console.log(`
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–π —Ü–µ–Ω—ã
async function getBestSwapPrice(tokenA, tokenB, amountIn) {
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –æ—Ç PancakeSwap
  const pancakeRouter = new ethers.Contract(
    "${dappConfig.pancakeswap.router}",
    ["function getAmountsOut(uint256,address[]) external view returns (uint256[])"],
    signer
  );
  
  const pancakePath = [tokenA, tokenB];
  const pancakeAmounts = await pancakeRouter.getAmountsOut(amountIn, pancakePath);
  const pancakeOutput = pancakeAmounts[1];
  
  // –î–ª—è Raydium –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
  // (–≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ —É–ø—Ä–æ—â–µ–Ω–æ)
  
  console.log('PancakeSwap output:', ethers.formatUnits(pancakeOutput, 9));
  
  // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
  const usePancakeSwap = true; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
  
  return {
    platform: usePancakeSwap ? 0 : 1,
    expectedOutput: pancakeOutput,
    router: usePancakeSwap ? 'PancakeSwap' : 'Raydium'
  };
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const bestPrice = await getBestSwapPrice(
  "${dappConfig.tokens.USDC.address}",
  "${dappConfig.tokens.SOL.address}",
  ethers.parseUnits('100', 6)
);

console.log('Best platform:', bestPrice.router);
  `);

  // === –ü–†–ò–ú–ï–† 6: Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ ===
  console.log('\nüîÑ === EXAMPLE 6: BATCH OPERATIONS ===');
  
  console.log(`
// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤–∞–ø–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
async function performMultipleSwaps(count) {
  for (let i = 0; i < count; i++) {
    const swapParams = {
      platform: i % 2, // –ß–µ—Ä–µ–¥—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      tokenA: "${dappConfig.tokens.USDC.address}",
      tokenB: "${dappConfig.tokens.SOL.address}",
      amountIn: ethers.parseUnits('10', 6), // 10 USDC –∫–∞–∂–¥—ã–π
      amountOutMin: ethers.parseUnits('0.3', 9), // –º–∏–Ω–∏–º—É–º 0.3 SOL
      slippage: 500,
      raydiumPoolId: "${hasRaydiumPools ? raydiumPools['usdc/sol'] : 'ethers.ZeroHash'}"
    };
    
    // –ê–ø–ø—Ä—É–≤ —Ç–æ–∫–µ–Ω–æ–≤
    await usdcToken.approve("${dappConfig.contracts.multiSwapOrchestrator}", swapParams.amountIn);
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–∞–ø–∞
    const tx = await multiSwap.executeSwap(swapParams);
    await tx.wait();
    
    console.log(\`Swap \${i+1}/\${count} completed\`);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–≤–∞–ø–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å 5 —Å–≤–∞–ø–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
await performMultipleSwaps(5);

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã
const [, totalPoints] = await nftContract.getUserStats(signer.address);
console.log('Total points accumulated:', totalPoints.toString());
  `);

  // === –§–ò–ù–ê–õ–¨–ù–´–ï –°–û–í–ï–¢–´ ===
  console.log('\nüí° === INTEGRATION TIPS ===');
  
  console.log(`
### –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:

1. **Gas –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**:
   - –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ approve –∏ swap –≤ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ estimateGas –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤

2. **Error handling**:
   - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–≤–∞–ø–æ–º
   - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ slippage errors
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ try/catch –¥–ª—è graceful degradation

3. **User Experience**:
   - –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π—Ç–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
   - –û—Ç–æ–±—Ä–∞–∂–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é NFT

4. **Monitoring**:
   - –°–ª—É—à–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è SwapExecuted –∏ NFTMinted
   - –¢—Ä–µ–∫–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ health –ø—É–ª–æ–≤

### –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
- multiSwap.on('SwapExecuted', (user, platform, tokenA, tokenB, amountIn, amountOut, points) => {})
- nftContract.on('NFTMinted', (user, tokenId, rarity, points, description) => {})
- nftContract.on('SwapRecorded', (user, points, totalPoints) => {})
  `);

  console.log('\nüéâ === EXAMPLES COMPLETED ===');
  console.log('\nüìö See README.md for full documentation');
  console.log('üß™ Run: npm run test:swap for live testing');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
module.exports = {
  dappConfig,
  multiSwapABI,
  nftABI,
  erc20ABI
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  examples()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Examples failed:', error);
      process.exit(1);
    });
} 