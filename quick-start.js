const { ethers } = require("hardhat");

async function quickStart() {
    console.log("üöÄ === –ë–´–°–¢–†–´–ô –ó–ê–ü–£–°–ö DEFI –°–ò–°–¢–ï–ú–´ (–†–ï–ê–õ–¨–ù–´–ô WNEON) ===\n");
    
    console.log("‚ö†Ô∏è  –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Hardhat node –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ!");
    console.log("   –ö–æ–º–∞–Ω–¥–∞: npx hardhat node\n");
    
    // –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° WNEON –í –°–ï–¢–ò NEON EVM
    const REAL_WNEON_ADDRESS = "0x11adC2d986E334137b9ad0a0F290771F31e9517F";
    
    try {
        const [deployer] = await ethers.getSigners();
        console.log(`üë§ Deployer: ${deployer.address}`);
        
        const balance = await deployer.provider.getBalance(deployer.address);
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} ETH\n`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
        const network = await ethers.provider.getNetwork();
        console.log(`üåê –°–µ—Ç—å: ${network.name} (Chain ID: ${network.chainId})`);
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Chain ID –¥–ª—è Hardhat
        const validChainIds = [1337n, 31337n];
        if (!validChainIds.includes(network.chainId)) {
            console.log("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ Hardhat node!");
            console.log("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx hardhat node");
            return { success: false, error: "Invalid chain ID" };
        }
        
        // === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –†–ï–ê–õ–¨–ù–û–ú–£ WNEON ===
        console.log("\nüîó === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –†–ï–ê–õ–¨–ù–û–ú–£ WNEON ===");
        
        console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WNEON: ${REAL_WNEON_ADDRESS}`);
        const wneon = await ethers.getContractAt("WNEON", REAL_WNEON_ADDRESS);
        console.log(`   ‚úÖ WNEON –ø–æ–¥–∫–ª—é—á–µ–Ω: ${REAL_WNEON_ADDRESS}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏ —Å–∏–º–≤–æ–ª–∞
        try {
            const name = await wneon.name();
            const symbol = await wneon.symbol();
            console.log(`   ‚úÖ –¢–æ–∫–µ–Ω: ${name} (${symbol})`);
        } catch (error) {
            console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ: ${error.message}`);
        }
        
        // === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –û–°–¢–ê–õ–¨–ù–´–• –ö–û–ù–¢–†–ê–ö–¢–û–í ===
        console.log("\nüì¶ === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–û–í ===");
        
        // 1. PancakeFactory
        console.log("1Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PancakeFactory...");
        const PancakeFactory = await ethers.getContractFactory("PancakeFactory");
        const factory = await PancakeFactory.deploy(deployer.address);
        await factory.waitForDeployment();
        const factoryAddress = await factory.getAddress();
        console.log(`   ‚úÖ PancakeFactory: ${factoryAddress}`);
        
        // 2. PancakeRouter
        console.log("2Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PancakeRouter...");
        const PancakeRouter = await ethers.getContractFactory("PancakeRouter");
        const router = await PancakeRouter.deploy(factoryAddress, REAL_WNEON_ADDRESS);
        await router.waitForDeployment();
        const routerAddress = await router.getAddress();
        console.log(`   ‚úÖ PancakeRouter: ${routerAddress}`);
        
        // 3. –¢–æ–∫–µ–Ω—ã
        console.log("3Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...");
        const MockERC20Factory = await ethers.getContractFactory("MockERC20");
        
        const usdc = await MockERC20Factory.deploy("USD Coin", "USDC", ethers.parseUnits("1000000", 6));
        await usdc.waitForDeployment();
        const usdcAddress = await usdc.getAddress();
        console.log(`   ‚úÖ USDC: ${usdcAddress}`);
        
        const usdt = await MockERC20Factory.deploy("Tether USD", "USDT", ethers.parseUnits("1000000", 6));
        await usdt.waitForDeployment();
        const usdtAddress = await usdt.getAddress();
        console.log(`   ‚úÖ USDT: ${usdtAddress}`);
        
        const btc = await MockERC20Factory.deploy("Bitcoin", "BTC", ethers.parseUnits("21000", 8));
        await btc.waitForDeployment();
        const btcAddress = await btc.getAddress();
        console.log(`   ‚úÖ BTC: ${btcAddress}`);
        
        const eth = await MockERC20Factory.deploy("Ethereum", "ETH", ethers.parseEther("120000"));
        await eth.waitForDeployment();
        const ethAddress = await eth.getAddress();
        console.log(`   ‚úÖ ETH: ${ethAddress}`);
        
        // 4. Raydium
        console.log("4Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Raydium...");
        const RaydiumFactory = await ethers.getContractFactory("RaydiumSwapContract");
        const raydium = await RaydiumFactory.deploy();
        await raydium.waitForDeployment();
        const raydiumAddress = await raydium.getAddress();
        console.log(`   ‚úÖ Raydium: ${raydiumAddress}`);
        
        // 5. NFT Rewards
        console.log("5Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ NFT Rewards...");
        const NFTRewardsFactory = await ethers.getContractFactory("NFTRewardsContract");
        const nftRewards = await NFTRewardsFactory.deploy();
        await nftRewards.waitForDeployment();
        const nftRewardsAddress = await nftRewards.getAddress();
        console.log(`   ‚úÖ NFT Rewards: ${nftRewardsAddress}`);
        
        // === –°–û–ó–î–ê–ù–ò–ï –ü–ê–† ===
        console.log("\nüîó === –°–û–ó–î–ê–ù–ò–ï –ü–ê–† ===");
        
        const tokens = [
            { name: "USDC", address: usdcAddress, contract: usdc },
            { name: "USDT", address: usdtAddress, contract: usdt },
            { name: "BTC", address: btcAddress, contract: btc },
            { name: "ETH", address: ethAddress, contract: eth }
        ];
        
        for (const token of tokens) {
            console.log(`üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã ${token.name}/WNEON...`);
            try {
                const tx = await factory.createPair(token.address, REAL_WNEON_ADDRESS);
                await tx.wait();
                console.log(`   ‚úÖ –ü–∞—Ä–∞ ${token.name}/WNEON —Å–æ–∑–¥–∞–Ω–∞`);
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã ${token.name}/WNEON: ${error.message}`);
            }
        }
        
        // === –î–ï–ü–û–ó–ò–¢ –ò –ü–û–õ–£–ß–ï–ù–ò–ï WNEON ===
        console.log("\nüíß === –î–ï–ü–û–ó–ò–¢ –ò –ü–û–õ–£–ß–ï–ù–ò–ï WNEON ===");
        
        const wrapAmount = ethers.parseEther("1000");
        console.log(`üíß –î–µ–ø–æ–∑–∏—Ç ${ethers.formatEther(wrapAmount)} NEON –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è WNEON...`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å WNEON
            const wneonBalanceBefore = await wneon.balanceOf(deployer.address);
            console.log(`   üìä WNEON –±–∞–ª–∞–Ω—Å –¥–æ –¥–µ–ø–æ–∑–∏—Ç–∞: ${ethers.formatEther(wneonBalanceBefore)}`);
            
            // –î–µ–ª–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç (wrap –Ω–∞—Ç–∏–≤–Ω—ã–π NEON –≤ WNEON)
            const wrapTx = await wneon.deposit({ value: wrapAmount });
            await wrapTx.wait();
            console.log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            const wneonBalanceAfter = await wneon.balanceOf(deployer.address);
            const receivedWneon = wneonBalanceAfter - wneonBalanceBefore;
            console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ WNEON: ${ethers.formatEther(receivedWneon)}`);
            console.log(`   ‚úÖ –û–±—â–∏–π WNEON –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(wneonBalanceAfter)}`);
            
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ WNEON: ${error.message}`);
            console.log(`   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ç—Ä–∞–∫—Ç WNEON –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é`);
        }
        
        // === –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===
        console.log("\nüíß === –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===");
        
        const liquidityPairs = [
            { name: "USDC", contract: usdc, wneon: "200", token: "200", decimals: 6 },
            { name: "USDT", contract: usdt, wneon: "200", token: "200", decimals: 6 },
            { name: "BTC", contract: btc, wneon: "200", token: "0.1", decimals: 8 },
            { name: "ETH", contract: eth, wneon: "200", token: "10", decimals: 18 }
        ];
        
        for (const pair of liquidityPairs) {
            console.log(`üíß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ${pair.name}/WNEON...`);
            
            const wneonAmount = ethers.parseEther(pair.wneon);
            const tokenAmount = ethers.parseUnits(pair.token, pair.decimals);
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å WNEON
                const wneonBalance = await wneon.balanceOf(deployer.address);
                if (wneonBalance < wneonAmount) {
                    console.log(`   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WNEON. –ï—Å—Ç—å: ${ethers.formatEther(wneonBalance)}, –Ω—É–∂–Ω–æ: ${ethers.formatEther(wneonAmount)}`);
                    continue;
                }
                
                // Approve
                await wneon.approve(routerAddress, wneonAmount);
                await pair.contract.approve(routerAddress, tokenAmount);
                
                // Add liquidity
                const deadline = Math.floor(Date.now() / 1000) + 3600;
                const tx = await router.addLiquidity(
                    await pair.contract.getAddress(),
                    REAL_WNEON_ADDRESS,
                    tokenAmount,
                    wneonAmount,
                    0, 0,
                    deployer.address,
                    deadline
                );
                
                await tx.wait();
                console.log(`   ‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ${pair.name}/WNEON –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${pair.token} ${pair.name} + ${pair.wneon} WNEON`);
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ${pair.name}/WNEON: ${error.message}`);
            }
        }
        
        // === –ù–ê–°–¢–†–û–ô–ö–ê NFT –°–ò–°–¢–ï–ú–´ ===
        console.log("\nüé® === –ù–ê–°–¢–†–û–ô–ö–ê NFT –°–ò–°–¢–ï–ú–´ ===");
        
        try {
            await nftRewards.authorizeSwapContract(routerAddress, true);
            await nftRewards.authorizeSwapContract(raydiumAddress, true);
            console.log("   ‚úÖ Swap –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è NFT –Ω–∞–≥—Ä–∞–¥");
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
        
        // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–ê–ü–û–í ===
        console.log("\nüß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–ê–ü–û–í ===");
        
        try {
            const swapAmount = ethers.parseEther("1");
            const path = [REAL_WNEON_ADDRESS, usdcAddress];
            
            const amountsOut = await router.getAmountsOut(swapAmount, path);
            const expectedUsdc = ethers.formatUnits(amountsOut[1], 6);
            console.log(`   ‚úÖ –†–∞—Å—á–µ—Ç —Å–≤–∞–ø–∞: 1 WNEON = ${expectedUsdc} USDC`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å WNEON –¥–ª—è —Å–≤–∞–ø–∞
            const wneonBalance = await wneon.balanceOf(deployer.address);
            if (wneonBalance >= swapAmount) {
                // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π swap
                await wneon.approve(routerAddress, swapAmount);
                
                const usdcBalanceBefore = await usdc.balanceOf(deployer.address);
                
                const swapTx = await router.swapExactTokensForTokens(
                    swapAmount,
                    0,
                    path,
                    deployer.address,
                    Math.floor(Date.now() / 1000) + 3600
                );
                
                await swapTx.wait();
                
                const usdcBalanceAfter = await usdc.balanceOf(deployer.address);
                const usdcReceived = usdcBalanceAfter - usdcBalanceBefore;
                
                console.log(`   ‚úÖ Swap –≤—ã–ø–æ–ª–Ω–µ–Ω: –ø–æ–ª—É—á–µ–Ω–æ ${ethers.formatUnits(usdcReceived, 6)} USDC`);
            } else {
                console.log(`   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WNEON –¥–ª—è —Å–≤–∞–ø–∞. –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(wneonBalance)}`);
            }
            
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–≤–∞–ø–∞: ${error.message}`);
        }
        
        // === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===
        console.log("\nüìã === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===");
        
        console.log("üìä –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:");
        console.log(`   WNEON (–†–ï–ê–õ–¨–ù–´–ô): ${REAL_WNEON_ADDRESS}`);
        console.log(`   PancakeFactory: ${factoryAddress}`);
        console.log(`   PancakeRouter: ${routerAddress}`);
        console.log(`   USDC: ${usdcAddress}`);
        console.log(`   USDT: ${usdtAddress}`);
        console.log(`   BTC: ${btcAddress}`);
        console.log(`   ETH: ${ethAddress}`);
        console.log(`   Raydium: ${raydiumAddress}`);
        console.log(`   NFT Rewards: ${nftRewardsAddress}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        const finalWneonBalance = await wneon.balanceOf(deployer.address);
        console.log(`\nüí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π WNEON –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(finalWneonBalance)}`);
        
        console.log("\nüíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:");
        console.log("   ‚úÖ USDC/WNEON: 200 USDC + 200 WNEON");
        console.log("   ‚úÖ USDT/WNEON: 200 USDT + 200 WNEON");
        console.log("   ‚úÖ BTC/WNEON: 0.1 BTC + 200 WNEON");
        console.log("   ‚úÖ ETH/WNEON: 10 ETH + 200 WNEON");
        
        console.log("\nüéØ –§—É–Ω–∫—Ü–∏–∏:");
        console.log("   ‚úÖ PancakeSwap DEX —Å –†–ï–ê–õ–¨–ù–´–ú WNEON");
        console.log("   ‚úÖ Raydium –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è");
        console.log("   ‚úÖ NFT —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥");
        console.log("   ‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é");
        console.log("   ‚úÖ –î–µ–ø–æ–∑–∏—Ç NEON ‚Üí WNEON —Ä–∞–±–æ—Ç–∞–µ—Ç");
        
        const finalBalance = await deployer.provider.getBalance(deployer.address);
        const gasUsed = balance - finalBalance;
        console.log(`\n‚õΩ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≥–∞–∑–∞: ${ethers.formatEther(gasUsed)} ETH`);
        
        console.log("\nüéâ === –°–ò–°–¢–ï–ú–ê –° –†–ï–ê–õ–¨–ù–´–ú WNEON –†–ê–ó–í–ï–†–ù–£–¢–ê! ===");
        console.log("üöÄ –í–∞—à–∞ DeFi –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º WNEON –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º!");
        
        console.log("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
        console.log("   1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: node simple-test.js");
        console.log("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: node diagnose-system.js");
        console.log("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: node test-liquidity-deployment.js");
        console.log("   4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫ http://localhost:8545");
        
        return {
            success: true,
            contracts: {
                wneon: REAL_WNEON_ADDRESS,
                factory: factoryAddress,
                router: routerAddress,
                usdc: usdcAddress,
                usdt: usdtAddress,
                btc: btcAddress,
                eth: ethAddress,
                raydium: raydiumAddress,
                nftRewards: nftRewardsAddress
            }
        };
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:", error);
        console.log("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:");
        console.log("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Hardhat node –∑–∞–ø—É—â–µ–Ω: npx hardhat node");
        console.log("   2. –ö–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: npx hardhat compile");
        console.log("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ WNEON –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω");
        console.log("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
        return { success: false, error: error.message };
    }
}

if (require.main === module) {
    quickStart()
        .then((result) => {
            if (result.success) {
                console.log("\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º WNEON –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                process.exit(0);
            } else {
                console.log("\n‚ùå –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!");
                process.exit(1);
            }
        })
        .catch((error) => {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}

module.exports = { quickStart }; 