const { ethers } = require("hardhat");

async function diagnoseSystem() {
    console.log("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ (–†–ï–ê–õ–¨–ù–´–ô WNEON) ===\n");
    
    // –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° WNEON –í –°–ï–¢–ò NEON EVM
    const REAL_WNEON_ADDRESS = "0x11adC2d986E334137b9ad0a0F290771F31e9517F";
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
        console.log("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏...");
        const provider = ethers.provider;
        const network = await provider.getNetwork();
        console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏: ${network.name} (Chain ID: ${network.chainId})`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        console.log("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...");
        const [deployer] = await ethers.getSigners();
        console.log(`   ‚úÖ Deployer: ${deployer.address}`);
        
        const balance = await deployer.provider.getBalance(deployer.address);
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} ETH`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        console.log("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...");
        
        const expectedAddresses = {
            wneon: REAL_WNEON_ADDRESS,
            factory: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
            router: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
            usdc: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
            usdt: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
            btc: "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
            eth: "0x0165878A594ca255338adfa4d48449f69242Eb8F"
        };
        
        const contractStatus = {};
        
        for (const [name, address] of Object.entries(expectedAddresses)) {
            try {
                const code = await provider.getCode(address);
                if (code && code !== "0x") {
                    contractStatus[name] = "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢";
                    if (name === "wneon") {
                        console.log(`   ‚úÖ ${name.toUpperCase()}: ${address} - –†–ï–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢`);
                    } else {
                        console.log(`   ‚úÖ ${name.toUpperCase()}: ${address} - –†–ê–ó–í–ï–†–ù–£–¢`);
                    }
                } else {
                    contractStatus[name] = "‚ùå –ù–ï –ù–ê–ô–î–ï–ù";
                    if (name === "wneon") {
                        console.log(`   ‚ùå ${name.toUpperCase()}: ${address} - –†–ï–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢ –ù–ï –î–û–°–¢–£–ü–ï–ù`);
                    } else {
                        console.log(`   ‚ùå ${name.toUpperCase()}: ${address} - –ù–ï –ù–ê–ô–î–ï–ù`);
                    }
                }
            } catch (error) {
                contractStatus[name] = "‚ùå –û–®–ò–ë–ö–ê";
                console.log(`   ‚ùå ${name.toUpperCase()}: ${address} - –û–®–ò–ë–ö–ê: ${error.message}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        console.log("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...");
        
        if (contractStatus.wneon === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
            try {
                const wneon = await ethers.getContractAt("WNEON", REAL_WNEON_ADDRESS);
                const name = await wneon.name();
                const symbol = await wneon.symbol();
                const deployerBalance = await wneon.balanceOf(deployer.address);
                
                console.log(`   ‚úÖ WNEON (–†–ï–ê–õ–¨–ù–´–ô) —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç: ${name} (${symbol})`);
                console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å WNEON: ${ethers.formatEther(deployerBalance)}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                try {
                    const totalSupply = await wneon.totalSupply();
                    console.log(`   ‚úÖ Total Supply WNEON: ${ethers.formatEther(totalSupply)}`);
                } catch (error) {
                    console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å total supply: ${error.message}`);
                }
                
            } catch (error) {
                console.log(`   ‚ùå WNEON –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç: ${error.message}`);
            }
        } else {
            console.log(`   ‚ö†Ô∏è  –†–ï–ê–õ–¨–ù–´–ô WNEON –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ç—å –Ω–µ Neon EVM`);
        }
        
        if (contractStatus.factory === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
            try {
                const factory = await ethers.getContractAt("PancakeFactory", expectedAddresses.factory);
                const feeToSetter = await factory.feeToSetter();
                console.log(`   ‚úÖ PancakeFactory —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç: ${feeToSetter}`);
            } catch (error) {
                console.log(`   ‚ùå PancakeFactory –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç: ${error.message}`);
            }
        }
        
        if (contractStatus.router === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
            try {
                const router = await ethers.getContractAt("PancakeRouter", expectedAddresses.router);
                const factoryAddr = await router.factory();
                const wneonAddr = await router.WETH();
                console.log(`   ‚úÖ PancakeRouter —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç: factory ${factoryAddr}`);
                console.log(`   ‚úÖ Router WETH –∞–¥—Ä–µ—Å: ${wneonAddr}`);
                if (wneonAddr.toLowerCase() !== REAL_WNEON_ADDRESS.toLowerCase()) {
                    console.log(`   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Router —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–π WNEON –∞–¥—Ä–µ—Å!`);
                }
            } catch (error) {
                console.log(`   ‚ùå PancakeRouter –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç: ${error.message}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        console.log("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...");
        
        if (contractStatus.factory === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢" && contractStatus.wneon === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
            try {
                const factory = await ethers.getContractAt("PancakeFactory", expectedAddresses.factory);
                const wneon = await ethers.getContractAt("WNEON", REAL_WNEON_ADDRESS);
                
                const pairs = [
                    { name: "USDC", address: expectedAddresses.usdc, decimals: 6 },
                    { name: "USDT", address: expectedAddresses.usdt, decimals: 6 },
                    { name: "BTC", address: expectedAddresses.btc, decimals: 8 },
                    { name: "ETH", address: expectedAddresses.eth, decimals: 18 }
                ];
                
                for (const pair of pairs) {
                    if (contractStatus[pair.name.toLowerCase()] === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
                        const pairAddress = await factory.getPair(pair.address, REAL_WNEON_ADDRESS);
                        
                        if (pairAddress !== ethers.ZeroAddress) {
                            const token = await ethers.getContractAt("MockERC20", pair.address);
                            const tokenBalance = await token.balanceOf(pairAddress);
                            const wneonBalance = await wneon.balanceOf(pairAddress);
                            
                            if (tokenBalance > 0 && wneonBalance > 0) {
                                console.log(`   ‚úÖ ${pair.name}/WNEON: ${ethers.formatUnits(tokenBalance, pair.decimals)} ${pair.name} + ${ethers.formatEther(wneonBalance)} WNEON`);
                            } else {
                                console.log(`   ‚ùå ${pair.name}/WNEON: –ù–ï–¢ –õ–ò–ö–í–ò–î–ù–û–°–¢–ò`);
                            }
                        } else {
                            console.log(`   ‚ùå ${pair.name}/WNEON: –ü–ê–†–ê –ù–ï –°–û–ó–î–ê–ù–ê`);
                        }
                    }
                }
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: ${error.message}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –¢–µ—Å—Ç —Å–≤–∞–ø–∞
        console.log("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å–≤–∞–ø–∞...");
        
        if (contractStatus.router === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢" && contractStatus.wneon === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢" && contractStatus.usdc === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
            try {
                const router = await ethers.getContractAt("PancakeRouter", expectedAddresses.router);
                const swapAmount = ethers.parseEther("1");
                const path = [REAL_WNEON_ADDRESS, expectedAddresses.usdc];
                
                const amountsOut = await router.getAmountsOut(swapAmount, path);
                const expectedUsdc = ethers.formatUnits(amountsOut[1], 6);
                console.log(`   ‚úÖ –†–∞—Å—á–µ—Ç —Å–≤–∞–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: 1 WNEON = ${expectedUsdc} USDC`);
            } catch (error) {
                console.log(`   ‚ùå –†–∞—Å—á–µ—Ç —Å–≤–∞–ø–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –¢–µ—Å—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ WNEON
        console.log("\n7Ô∏è‚É£ –¢–µ—Å—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ WNEON...");
        
        if (contractStatus.wneon === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
            try {
                const wneon = await ethers.getContractAt("WNEON", REAL_WNEON_ADDRESS);
                const testAmount = ethers.parseEther("0.001"); // –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç 0.001 ETH
                
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ
                const balanceBefore = await wneon.balanceOf(deployer.address);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç (—Å–∏–º—É–ª—è—Ü–∏—è)
                console.log(`   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ ${ethers.formatEther(testAmount)} NEON...`);
                console.log(`   üìä WNEON –±–∞–ª–∞–Ω—Å –¥–æ: ${ethers.formatEther(balanceBefore)}`);
                console.log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
                
            } catch (error) {
                console.log(`   ‚ùå –¢–µ—Å—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
            }
        }
        
        // –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        console.log("\nüìã === –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===");
        
        const deployedContracts = Object.values(contractStatus).filter(status => status === "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢").length;
        const totalContracts = Object.keys(contractStatus).length;
        
        console.log(`üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ${deployedContracts}/${totalContracts}`);
        console.log(`üåê WNEON: –†–ï–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–ê–ö–¢ (${REAL_WNEON_ADDRESS})`);
        
        if (deployedContracts === 0) {
            console.log("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:");
            console.log("   ‚ùå –ù–ò –û–î–ò–ù –ö–û–ù–¢–†–ê–ö–¢ –ù–ï –†–ê–ó–í–ï–†–ù–£–¢!");
            console.log("   üîß –†–ï–®–ï–ù–ò–ï:");
            console.log("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Hardhat node: npx hardhat node");
            console.log("   2. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: node quick-start.js");
            
        } else if (deployedContracts < totalContracts) {
            console.log("\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:");
            if (contractStatus.wneon !== "‚úÖ –†–ê–ó–í–ï–†–ù–£–¢") {
                console.log("   ‚ùå –†–ï–ê–õ–¨–ù–´–ô WNEON –ù–ï–î–û–°–¢–£–ü–ï–ù!");
                console.log("   üîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:");
                console.log("   1. –°–µ—Ç—å –Ω–µ Neon EVM");
                console.log("   2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º");
                console.log("   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏");
            } else {
                console.log("   ‚ùå –ù–ï –í–°–ï –õ–û–ö–ê–õ–¨–ù–´–ï –ö–û–ù–¢–†–ê–ö–¢–´ –†–ê–ó–í–ï–†–ù–£–¢–´!");
                console.log("   üîß –†–ï–®–ï–ù–ò–ï:");
                console.log("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Hardhat node: npx hardhat node");
                console.log("   2. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: node quick-start.js");
            }
            
        } else {
            console.log("\n‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!");
            console.log("   ‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã");
            console.log("   ‚úÖ –†–ï–ê–õ–¨–ù–´–ô WNEON –ø–æ–¥–∫–ª—é—á–µ–Ω");
            console.log("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        }
        
        console.log("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
        console.log("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: node quick-start.js");
        console.log("   2. –°–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç NEON ‚Üí WNEON");
        console.log("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: node check-liquidity.js");
        console.log("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: node test-liquidity-deployment.js");
        
        console.log("\nüí° –í–ê–ñ–ù–û:");
        console.log("   üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ô WNEON –∫–æ–Ω—Ç—Ä–∞–∫—Ç");
        console.log("   üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è WNEON –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç");
        console.log("   üåê –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏");
        
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", error);
        console.log("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:");
        console.log("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Hardhat node –∑–∞–ø—É—â–µ–Ω");
        console.log("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏");
        console.log("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx hardhat compile");
        console.log("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏");
        console.log("   5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WNEON –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω");
    }
}

if (require.main === module) {
    diagnoseSystem();
}

module.exports = { diagnoseSystem }; 