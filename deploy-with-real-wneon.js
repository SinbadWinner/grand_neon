const { ethers } = require("hardhat");

async function deployWithRealWneon() {
    console.log("üöÄ === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú WNEON ===\n");
    
    // –†–ï–ê–õ–¨–ù–´–ô –ê–î–†–ï–° WNEON –í –°–ï–¢–ò NEON EVM
    const REAL_WNEON_ADDRESS = "0x11adC2d986E334137b9ad0a0F290771F31e9517F";
    
    try {
        const [deployer] = await ethers.getSigners();
        console.log(`üë§ Deployer: ${deployer.address}`);
        
        const balance = await deployer.provider.getBalance(deployer.address);
        console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} ETH\n`);
        
        // === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –†–ï–ê–õ–¨–ù–û–ú–£ WNEON ===
        console.log("üîó === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –†–ï–ê–õ–¨–ù–û–ú–£ WNEON ===");
        
        console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É WNEON: ${REAL_WNEON_ADDRESS}`);
        const wneon = await ethers.getContractAt("WNEON", REAL_WNEON_ADDRESS);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        try {
            const name = await wneon.name();
            const symbol = await wneon.symbol();
            const currentBalance = await wneon.balanceOf(deployer.address);
            
            console.log(`   ‚úÖ WNEON –ø–æ–¥–∫–ª—é—á–µ–Ω: ${name} (${symbol})`);
            console.log(`   üìä –¢–µ–∫—É—â–∏–π WNEON –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(currentBalance)}`);
        } catch (error) {
            console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ WNEON: ${error.message}`);
        }
        
        // === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï DEX –ö–û–ù–¢–†–ê–ö–¢–û–í ===
        console.log("\nüì¶ === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï DEX –ö–û–ù–¢–†–ê–ö–¢–û–í ===");
        
        // 1. PancakeFactory
        console.log("1Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PancakeFactory...");
        const PancakeFactory = await ethers.getContractFactory("PancakeFactory");
        const factory = await PancakeFactory.deploy(deployer.address);
        await factory.waitForDeployment();
        const factoryAddress = await factory.getAddress();
        console.log(`   ‚úÖ PancakeFactory: ${factoryAddress}`);
        
        // 2. PancakeRouter —Å —Ä–µ–∞–ª—å–Ω—ã–º WNEON
        console.log("2Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PancakeRouter...");
        const PancakeRouter = await ethers.getContractFactory("PancakeRouter");
        const router = await PancakeRouter.deploy(factoryAddress, REAL_WNEON_ADDRESS);
        await router.waitForDeployment();
        const routerAddress = await router.getAddress();
        console.log(`   ‚úÖ PancakeRouter: ${routerAddress}`);
        console.log(`   üîó Router –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ WNEON: ${REAL_WNEON_ADDRESS}`);
        
        // === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í ===
        console.log("\nü™ô === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í ===");
        
        const MockERC20Factory = await ethers.getContractFactory("MockERC20");
        
        const usdc = await MockERC20Factory.deploy("USD Coin", "USDC", ethers.parseUnits("1000000", 6));
        await usdc.waitForDeployment();
        const usdcAddress = await usdc.getAddress();
        console.log(`   ‚úÖ USDC: ${usdcAddress}`);
        
        const usdt = await MockERC20Factory.deploy("Tether USD", "USDT", ethers.parseUnits("1000000", 6));
        await usdt.waitForDeployment();
        const usdtAddress = await usdt.getAddress();
        console.log(`   ‚úÖ USDT: ${usdtAddress}`);
        
        const btc = await MockERC20Factory.deploy("Bitcoin", "BTC", ethers.parseUnits("21000", 8));
        await btc.waitForDeployment();
        const btcAddress = await btc.getAddress();
        console.log(`   ‚úÖ BTC: ${btcAddress}`);
        
        const eth = await MockERC20Factory.deploy("Ethereum", "ETH", ethers.parseEther("120000"));
        await eth.waitForDeployment();
        const ethAddress = await eth.getAddress();
        console.log(`   ‚úÖ ETH: ${ethAddress}`);
        
        // === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ö–û–ù–¢–†–ê–ö–¢–û–í ===
        console.log("\nüé® === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ö–û–ù–¢–†–ê–ö–¢–û–í ===");
        
        // Raydium
        const RaydiumFactory = await ethers.getContractFactory("RaydiumSwapContract");
        const raydium = await RaydiumFactory.deploy();
        await raydium.waitForDeployment();
        const raydiumAddress = await raydium.getAddress();
        console.log(`   ‚úÖ Raydium: ${raydiumAddress}`);
        
        // NFT Rewards
        const NFTRewardsFactory = await ethers.getContractFactory("NFTRewardsContract");
        const nftRewards = await NFTRewardsFactory.deploy();
        await nftRewards.waitForDeployment();
        const nftRewardsAddress = await nftRewards.getAddress();
        console.log(`   ‚úÖ NFT Rewards: ${nftRewardsAddress}`);
        
        // === –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–† ===
        console.log("\nüîó === –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–† ===");
        
        const tokens = [
            { name: "USDC", address: usdcAddress },
            { name: "USDT", address: usdtAddress },
            { name: "BTC", address: btcAddress },
            { name: "ETH", address: ethAddress }
        ];
        
        for (const token of tokens) {
            console.log(`üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã ${token.name}/WNEON...`);
            try {
                const createTx = await factory.createPair(token.address, REAL_WNEON_ADDRESS);
                await createTx.wait();
                
                const pairAddress = await factory.getPair(token.address, REAL_WNEON_ADDRESS);
                console.log(`   ‚úÖ –ü–∞—Ä–∞ ${token.name}/WNEON —Å–æ–∑–¥–∞–Ω–∞: ${pairAddress}`);
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã ${token.name}/WNEON: ${error.message}`);
            }
        }
        
        // === –î–ï–ü–û–ó–ò–¢ NEON –í WNEON ===
        console.log("\nüíß === –î–ï–ü–û–ó–ò–¢ NEON –í WNEON ===");
        
        const depositAmount = ethers.parseEther("1000");
        console.log(`üíß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ ${ethers.formatEther(depositAmount)} NEON...`);
        
        try {
            const balanceBefore = await wneon.balanceOf(deployer.address);
            console.log(`   üìä WNEON –±–∞–ª–∞–Ω—Å –¥–æ –¥–µ–ø–æ–∑–∏—Ç–∞: ${ethers.formatEther(balanceBefore)}`);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
            const depositTx = await wneon.deposit({ value: depositAmount });
            await depositTx.wait();
            console.log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            
            const balanceAfter = await wneon.balanceOf(deployer.address);
            const received = balanceAfter - balanceBefore;
            console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ WNEON: ${ethers.formatEther(received)}`);
            console.log(`   üí∞ –ù–æ–≤—ã–π WNEON –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(balanceAfter)}`);
            
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${error.message}`);
            console.log(`   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –¥–µ–ø–æ–∑–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–π —Å–µ—Ç–∏`);
        }
        
        // === –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===
        console.log("\nüíß === –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò ===");
        
        const currentWneonBalance = await wneon.balanceOf(deployer.address);
        console.log(`üí∞ –î–æ—Å—Ç—É–ø–Ω–æ WNEON –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: ${ethers.formatEther(currentWneonBalance)}`);
        
        if (currentWneonBalance > 0) {
            const liquidityPairs = [
                { name: "USDC", contract: usdc, wneon: "200", token: "200", decimals: 6 },
                { name: "USDT", contract: usdt, wneon: "200", token: "200", decimals: 6 },
                { name: "BTC", contract: btc, wneon: "150", token: "0.1", decimals: 8 },
                { name: "ETH", contract: eth, wneon: "200", token: "10", decimals: 18 }
            ];
            
            for (const pair of liquidityPairs) {
                const wneonAmount = ethers.parseEther(pair.wneon);
                const tokenAmount = ethers.parseUnits(pair.token, pair.decimals);
                
                console.log(`üíß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ${pair.name}/WNEON...`);
                console.log(`   üìä ${pair.token} ${pair.name} + ${pair.wneon} WNEON`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å WNEON
                if (currentWneonBalance < wneonAmount) {
                    console.log(`   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WNEON –¥–ª—è –ø–∞—Ä—ã ${pair.name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                    continue;
                }
                
                try {
                    // Approve —Ç–æ–∫–µ–Ω–æ–≤
                    console.log(`   üîì Approve —Ç–æ–∫–µ–Ω–æ–≤...`);
                    await wneon.approve(routerAddress, wneonAmount);
                    await pair.contract.approve(routerAddress, tokenAmount);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                    const deadline = Math.floor(Date.now() / 1000) + 3600;
                    const addLiquidityTx = await router.addLiquidity(
                        await pair.contract.getAddress(),
                        REAL_WNEON_ADDRESS,
                        tokenAmount,
                        wneonAmount,
                        0, // min tokenAmount
                        0, // min wneonAmount
                        deployer.address,
                        deadline
                    );
                    
                    await addLiquidityTx.wait();
                    console.log(`   ‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ${pair.name}/WNEON –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                    
                } catch (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ${pair.name}/WNEON: ${error.message}`);
                }
            }
        } else {
            console.log("   ‚ö†Ô∏è  –ù–µ—Ç WNEON –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏");
        }
        
        // === –ù–ê–°–¢–†–û–ô–ö–ê NFT –°–ò–°–¢–ï–ú–´ ===
        console.log("\nüé® === –ù–ê–°–¢–†–û–ô–ö–ê NFT –°–ò–°–¢–ï–ú–´ ===");
        
        try {
            await nftRewards.authorizeSwapContract(routerAddress, true);
            await nftRewards.authorizeSwapContract(raydiumAddress, true);
            console.log("   ‚úÖ Swap –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è NFT –Ω–∞–≥—Ä–∞–¥");
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NFT —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
        }
        
        // === –¢–ï–°–¢–û–í–´–ô SWAP ===
        console.log("\nüß™ === –¢–ï–°–¢–û–í–´–ô SWAP ===");
        
        const testWneonBalance = await wneon.balanceOf(deployer.address);
        if (testWneonBalance > 0) {
            try {
                const swapAmount = ethers.parseEther("1");
                const path = [REAL_WNEON_ADDRESS, usdcAddress];
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const amountsOut = await router.getAmountsOut(swapAmount, path);
                const expectedUsdc = ethers.formatUnits(amountsOut[1], 6);
                console.log(`   üìä –†–∞—Å—á–µ—Ç: 1 WNEON = ${expectedUsdc} USDC`);
                
                if (testWneonBalance >= swapAmount) {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π swap
                    await wneon.approve(routerAddress, swapAmount);
                    
                    const usdcBalanceBefore = await usdc.balanceOf(deployer.address);
                    
                    const swapTx = await router.swapExactTokensForTokens(
                        swapAmount,
                        0,
                        path,
                        deployer.address,
                        Math.floor(Date.now() / 1000) + 3600
                    );
                    
                    await swapTx.wait();
                    
                    const usdcBalanceAfter = await usdc.balanceOf(deployer.address);
                    const receivedUsdc = usdcBalanceAfter - usdcBalanceBefore;
                    
                    console.log(`   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π swap –≤—ã–ø–æ–ª–Ω–µ–Ω: –ø–æ–ª—É—á–µ–Ω–æ ${ethers.formatUnits(receivedUsdc, 6)} USDC`);
                } else {
                    console.log(`   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WNEON –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ swap`);
                }
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ swap: ${error.message}`);
            }
        } else {
            console.log("   ‚ö†Ô∏è  –ù–µ—Ç WNEON –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ swap");
        }
        
        // === –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
        console.log("\nüíæ === –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
        
        const config = {
            network: "hardhat",
            chainId: 31337,
            deployer: deployer.address,
            timestamp: new Date().toISOString(),
            contracts: {
                wneon: REAL_WNEON_ADDRESS,
                factory: factoryAddress,
                router: routerAddress,
                usdc: usdcAddress,
                usdt: usdtAddress,
                btc: btcAddress,
                eth: ethAddress,
                raydium: raydiumAddress,
                nftRewards: nftRewardsAddress
            }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const fs = require('fs');
        fs.writeFileSync('real-wneon-config.json', JSON.stringify(config, null, 2));
        console.log("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ real-wneon-config.json");
        
        // === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===
        console.log("\nüìã === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===");
        
        const finalBalance = await deployer.provider.getBalance(deployer.address);
        const gasUsed = balance - finalBalance;
        const finalWneonBalance = await wneon.balanceOf(deployer.address);
        
        console.log("üéØ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:");
        console.log(`   WNEON (–†–ï–ê–õ–¨–ù–´–ô): ${REAL_WNEON_ADDRESS}`);
        console.log(`   PancakeFactory: ${factoryAddress}`);
        console.log(`   PancakeRouter: ${routerAddress}`);
        console.log(`   USDC: ${usdcAddress}`);
        console.log(`   USDT: ${usdtAddress}`);
        console.log(`   BTC: ${btcAddress}`);
        console.log(`   ETH: ${ethAddress}`);
        console.log(`   Raydium: ${raydiumAddress}`);
        console.log(`   NFT Rewards: ${nftRewardsAddress}`);
        
        console.log(`\nüí∞ –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:`);
        console.log(`   ETH: ${ethers.formatEther(finalBalance)}`);
        console.log(`   WNEON: ${ethers.formatEther(finalWneonBalance)}`);
        console.log(`   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≥–∞–∑–∞: ${ethers.formatEther(gasUsed)} ETH`);
        
        console.log("\n‚úÖ –§–£–ù–ö–¶–ò–ò:");
        console.log("   ‚úÖ PancakeSwap DEX —Å —Ä–µ–∞–ª—å–Ω—ã–º WNEON");
        console.log("   ‚úÖ –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
        console.log("   ‚úÖ –î–µ–ø–æ–∑–∏—Ç NEON ‚Üí WNEON —Ä–∞–±–æ—Ç–∞–µ—Ç");
        console.log("   ‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞");
        console.log("   ‚úÖ NFT —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥");
        console.log("   ‚úÖ Raydium –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è");
        
        console.log("\nüéâ === –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û! ===");
        console.log("üöÄ DeFi –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º WNEON –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
        
        console.log("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
        console.log("   1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: node diagnose-system.js");
        console.log("   2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: node check-liquidity.js");
        console.log("   3. –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã: node test-liquidity-deployment.js");
        console.log("   4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∫ http://localhost:8545");
        
        return {
            success: true,
            contracts: config.contracts,
            gasUsed: ethers.formatEther(gasUsed),
            wneonBalance: ethers.formatEther(finalWneonBalance)
        };
        
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:", error);
        console.log("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:");
        console.log("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Hardhat node –∑–∞–ø—É—â–µ–Ω");
        console.log("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–ø–∏–ª—è—Ü–∏—é: npx hardhat compile");
        console.log("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WNEON –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω");
        console.log("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏");
        
        return { success: false, error: error.message };
    }
}

if (require.main === module) {
    deployWithRealWneon()
        .then((result) => {
            if (result.success) {
                console.log("\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º WNEON –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
                process.exit(0);
            } else {
                console.log("\n‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å!");
                process.exit(1);
            }
        })
        .catch((error) => {
            console.error("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
            process.exit(1);
        });
}

module.exports = { deployWithRealWneon }; 